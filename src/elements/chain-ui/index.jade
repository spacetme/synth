
link(rel='import' href='../../environment.html')

polymer-element(name='chain-ui' attributes='model')
  template
    core-style(ref='chain-ui')
    style: :scss
      @import "style";
      :host > .container {
        display: flex;
        flex-wrap: nowrap;
        overflow-x: scroll;
        overflow-y: hidden;
        -webkit-overflow-scrolling: touch;
        align-content: stretch;
        padding: 8px;
        background: #353433;
        > :not(:last-child) {
          margin-right: 16px;
        }
        > * {
          flex-shrink: 0;
        }
      }
    .container
      template(repeat='{{item in model.voice}}')
        synth-options-oscillator
  script: :es6
    Polymer({
      created() {
        this.model = { }
      }
    })

polymer-element(name='synth-options-oscillator' noscript)
  template
    chain-item(title='Oscillator')
      synth-vbox(vertical layout style='width:6em')
        synth-item(flex title='Waveform')
          synth-button(flex) Square
        synth-item(title='Mode')
          synth-button-group
            synth-button(title='Mix with previous audio signal') +
            synth-button(title='Use previous audio signal to module frequency') FM
      synth-item(title='Frequency' style='width:6em'): synth-vbox(flex vertical layout start-justified)
        synth-item(title='Base')
          synth-lcd(title='Freq' value='0')
        synth-hbox(horizontal layout justified)
          synth-item(title='LFO:F'): synth-knob
          synth-item(title='LFO:A'): synth-knob
      synth-item(title='Envelope'): synth-hbox(flex horizontal layout justified)
        synth-item(flex title='A'): synth-vslider
        synth-item(flex title='D'): synth-vslider
        synth-item(flex title='S'): synth-vslider
        synth-item(flex title='R'): synth-vslider

polymer-element(name='synth-hbox' noscript)
  template
    style: :scss
      @import "style";
      @include content {
        > :not(:first-child) {
          margin-left: 3px;
        }
        > :not(:last-child) {
          margin-right: 3px;
        }
      }
    content

polymer-element(name='synth-vbox' noscript)
  template
    style: :scss
      @import "style";
      @include content {
        > :not(:first-child) {
          margin-top: 3px;
        }
        > :not(:last-child) {
          margin-bottom: 3px;
        }
      }
    content

polymer-element(name='synth-button' noscript)
  template
    style: :scss
      @import "style";
      :host {
        @extend %center-content;
        border: 1px solid #555453;
        background: #252423 linear-gradient(to bottom, #454443, #252423);
        border-radius: 3px;
        text-align: center;
        padding: 5px 0;
      }
    .content: content

polymer-element(name='synth-button-group' attributes='title' noscript)
  template
    style: :scss
      @import "style";
      :host {
        display: flex;
      }
      @include content {
        > synth-button {
          border-radius: 0;
          flex: 1;
          &:first-child {
            border-radius: 3px 0 0 3px;
          }
          &:not(:last-child) {
            border-right: 0;
          }
          &:last-child {
            border-radius: 0 3px 3px 0;
          }
          &:first-child:last-child {
            border-radius: 3px;
          }
        }
      }
    content

polymer-element(name='synth-item' attributes='title' noscript)
  template
    style: :scss
      @import "style";
      :host {
        display: flex;
        flex-direction: column;
      }
      :host > .title {
        text-align: center;
        color: #8b8685;
        margin-top: 1px;
        @include hint-text;
      }
    content
    .title {{title}}

polymer-element(name='synth-lcd' attributes='value' noscript)
  template
    style: :scss
      :host {
        background: #081a3b;
        border: 1px solid #45c;
        position: relative;
        padding: 4px;
      }
      :host > .content {
        text-align: right;
        font-size: 18px;
        color: #9df;
      }
    .content {{value}}

polymer-element(name='synth-knob' attributes='value')
  template
    style: :scss
      :host {
        width: 26px;
        height: 26px;
        border-radius: 26px;
        border: 2px solid #9c2;
        position: relative;
        display: block;
      }
    svg(width='26' height='26' style='position:absolute')
      - for (var i = -5; i <= 5; i ++)
        path(d='M13,0 l0,5' stroke='#454443' stroke-width='1' transform="rotate(#{i*27},13,13)")
    svg(width='26' height='26' style='position:absolute'
        touch-action='none' on-down='{{_onDown}}' on-track='{{_onTrack}}' on-up='{{_onUp}}')
      path(d="M13,13 l-2,0 l2,-12 l2,12 a2,2,0,0,1,-4,0" fill='#99cc22' transform='rotate({{viewAngle}},13,13)')
  script: :es6
    Polymer({
      computed: {
        viewAngle: '(viewValue - 0.5) * 2 * 135',
        viewValue: 'tracking ? tracking.value : value',
      },
      created(e) {
        this.value = 0
        this.tracking = false
      },
      _onDown(e) {
        this.tracking = { value: this.value }
      },
      _onTrack(e) {
        if (!this.tracking) return
        let rect = this.getBoundingClientRect()
        let center = [rect.left + rect.width / 2, rect.top + rect.height / 2]
        let pointer = [e.clientX, e.clientY]
        let distance = Math.hypot(pointer[0] - center[0], pointer[1] - center[1])
        if (distance > 10) {
          let angle = Math.atan2(pointer[0] - center[0], center[1] - pointer[1]) * 180 / Math.PI
          let value = Math.max(-1, Math.min(1, angle / 135)) / 2 + 0.5
          this.tracking.value = value
          this.fire('tracking', this.tracking.value)
        }
      },
      _onUp(e) {
        if (!this.tracking) return
        this.value = this.tracking.value
        this.tracking = false
        this.fire('trackingend', this.value)
      },
    })

polymer-element(name='synth-vslider' attributes='value')
  template
    style: :scss
      :host {
        display: block;
        position: relative;
        flex: 1;
        height: 100%;
        width: 24px;
      }
      .track {
        position: absolute;
        top: 0; right: 0; bottom: 0; left: 0;
        border: 1px solid #555453;
        background: rgba(0,0,0,0.5);
        border-radius: 24px;
      }
      .thumb {
        position: absolute;
        border-radius: 24px;
        left: 0; top: 100%;
        width: 18px; height: 18px;
        background: #8b8685;
      }
      .thumb-holder {
        position: absolute;
        top: 2px; left: 2px; bottom: 20px;
      }
    .track(touch-action='pan-x' on-down='{{_onDown}}' on-track='{{_onTrack}}' on-up='{{_onUp}}')
      .thumb-holder
        .thumb(style='top: {{viewTop}}%')
  script: :es6
    Polymer({
      created() {
        this.value = 0
        this.tracking = false
      },
      computed: {
        viewValue: 'tracking ? tracking.value : value',
        viewTop: '100 * (1 - viewValue)',
      },
      _onDown(e) {
        this.tracking = {
          value: this.value,
          startValue: this.value,
          startY: e.clientY,
        }
      },
      _onTrack(e) {
        if (!this.tracking) return
        let tracking = this.tracking
        let rect = this.getBoundingClientRect()
        let dx = Math.abs(e.clientX - (rect.left + rect.width / 2))
        let strength = 1 + Math.max(0, dx - 26) / 100
        let ratio = (1 / (rect.height - 26)) / strength
        let value = Math.max(0, Math.min(1,
          tracking.startValue - (e.clientY - tracking.startY) * ratio))
        this.tracking.value = value
        this.fire('tracking', this.tracking.value)
      },
      _onUp(e) {
        if (!this.tracking) return
        this.value = this.tracking.value
        this.tracking = false
        this.fire('trackingend', this.value)
      },
    })

polymer-element(name='chain-item' attributes='title' noscript)
  template
    style: :scss
      @import "style";
      :host > .title {
        background: #555453 linear-gradient(to bottom, #8b8685, #555453);
        border: 1px solid #8b8685;
        border-radius: 4px 4px 0 0;
        padding: 2px 3px;
      }
      :host > .content {
        background: #151413 linear-gradient(to bottom, #252423, #151413);
        height: 108px;
        border: 1px solid #8b8685;
        border-top: 0;
        border-radius: 0 0 4px 4px;
        padding: 4px;
        @extend .sections;
      }
    .title {{title}}
    synth-hbox.content(layout horizontal): content
