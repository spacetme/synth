
link(rel='import' href='../../environment.html')
link(rel='import' href='binding.html')
link(rel='import' href='ui.html')
link(rel='import' href='button.html')
link(rel='import' href='lcd.html')
link(rel='import' href='knob.html')
link(rel='import' href='slider.html')

polymer-element(name='synth-options-main' attributes='model')
  template
    chain-item(title='System')
      synth-item(flex title='Load/Save')
        synth-vbox(flex vertical layout style='width:6em')
          synth-button(flex on-tap="{{_load}}") Load
          synth-button(flex on-tap="{{_save}}") Save
  script: :es6
    Polymer({
      created() {
        this.model = { }
      },
      _load() {
        let value = prompt('Enter synth JSON!')
      },
      _save() {
        let value = prompt('Copy me!', JSON.stringify(this.model))
      },
    })

polymer-element(name='synth-options-oscillator' attributes='params index')
  template
    chain-item(title='Oscillator' index='{{index}}')
      synth-vbox(vertical layout style='width:6em')
        synth-item(flex title='Waveform')
          synth-button(flex on-tap="{{_switchWaveform}}") {{params.type}}
        synth-item(title='Mode')
          synth-button-group
            synth-button(is-active='{{params.mode == "mix"}}' title='Mix with previous audio signal') +
            synth-button(is-active='{{params.mode == "fm"}}'  title='Use previous audio signal to module frequency') FM
      synth-item(title='Amount'): synth-vbox(flex vertical layout center-justified)
        synth-item(title='Gain'): synth-knob#gain
        synth-item(title='FM'): synth-knob#fmAmount
      synth-item(title='Frequency'): synth-vbox(flex vertical layout center-justified)
        synth-item(title='Detune')
          synth-lcd(title='Freq' value='{{params.freq.detune}}' unit!='&cent;')
        synth-hbox(horizontal layout justified)
          synth-item(title='LFO:F'): synth-knob#lfoF
          synth-item(title='LFO:A'): synth-knob#lfoA
      synth-item(title='Envelope'): synth-hbox(flex horizontal layout justified)
        synth-item(flex title='A'): synth-vslider#envA
        synth-item(flex title='D'): synth-vslider#envD
        synth-item(flex title='S'): synth-vslider#envS
        synth-item(flex title='R'): synth-vslider#envR
      synth-binding(model='{{params.gain.volume}}' view='{{$.gain}}' type='gain'           title='Gain')
      synth-binding(model='{{params.fm.amount}}' view='{{$.fmAmount}}' type='fmAmount'     title='Frequency modulation amount')
      synth-binding(model='{{params.gain.adsr.a}}' view='{{$.envA}}' type='adsrTime'       title='Attack time')
      synth-binding(model='{{params.gain.adsr.d}}' view='{{$.envD}}' type='adsrTime'       title='Decay time')
      synth-binding(model='{{params.gain.adsr.s}}' view='{{$.envS}}' type='percentage'     title='Sustain level')
      synth-binding(model='{{params.gain.adsr.r}}' view='{{$.envR}}' type='adsrTime'       title='Release time')
      synth-binding(model='{{params.freq.lfo.freq}}' view='{{$.lfoF}}' type='lfoFrequency' title='LFO frequency')
      synth-binding(model='{{params.freq.lfo.amount}}' view='{{$.lfoA}}' type='lfoAmount'  title='LFO amount')
  script: :es6
    Polymer({
      created() {
        this.params = { }
      },
      ready() {
        console.log(this.params)
      },
      _switchWaveform() {
        let next = {
          'sine': 'square',
          'square': 'sawtooth',
          'sawtooth': 'triangle',
          'triangle': 'sine',
        }
        this.params.type = next[this.params.type]
        this.fire('modelchanged')
      }
    })

polymer-element(name='synth-options-biquad-filter' attributes='params index')
  template
    chain-item(title='Biquad Filter' index='{{index}}')
      synth-item(title='Type' style='width:6em')
        synth-vbox(flex vertical layout justified)
          synth-hbox(flex horizontal layout justified)
            synth-button(is-active='{{params.type == "lowpass"}}'  flex) LP
            synth-button(is-active='{{params.type == "highpass"}}' flex) HP
          synth-hbox(flex horizontal layout justified)
            synth-button(is-active='{{params.type == "bandpass"}}' flex) BP
            synth-button(is-active='{{params.type == "notch"}}'    flex) BS
      synth-item(title='Cutoff Freq (F)'): synth-hbox(flex horizontal layout justified)
        synth-item(flex title='I'): synth-vslider#freqI
        synth-item(flex title='A'): synth-vslider#freqA
        synth-item(flex title='P'): synth-vslider#freqP
        synth-item(flex title='D'): synth-vslider#freqD
        synth-item(flex title='S'): synth-vslider#freqS
      synth-item(title='LFO'): synth-vbox(flex vertical layout start-justified)
        synth-hbox(horizontal layout justified)
          synth-item(title='F:F'): synth-knob#lfoFF
          synth-item(title='F:A'): synth-knob#lfoFA
        synth-hbox(horizontal layout justified)
          synth-item(title='Q:F'): synth-knob#lfoQF
          synth-item(title='Q:A'): synth-knob#lfoQA
      synth-item(title='Resonance (Q)'): synth-hbox(flex horizontal layout justified)
        synth-item(flex title='I'): synth-vslider#qI
        synth-item(flex title='A'): synth-vslider#qA
        synth-item(flex title='P'): synth-vslider#qP
        synth-item(flex title='D'): synth-vslider#qD
        synth-item(flex title='S'): synth-vslider#qS
      synth-binding(model='{{params.freq.auto.i}}' view='{{$.freqI}}' type='frequency' title='Cutoff initial frequency')
      synth-binding(model='{{params.freq.auto.a}}' view='{{$.freqA}}' type='adsrTime'  title='Cutoff attack time')
      synth-binding(model='{{params.freq.auto.p}}' view='{{$.freqP}}' type='frequency' title='Cutoff peak frequency')
      synth-binding(model='{{params.freq.auto.d}}' view='{{$.freqD}}' type='adsrTime'  title='Cutoff decay time constant')
      synth-binding(model='{{params.freq.auto.s}}' view='{{$.freqS}}' type='frequency' title='Cutoff sustain frequency')
      synth-binding(model='{{params.q.auto.i}}' view='{{$.qI}}' type='q'           title='Resonance initial value')
      synth-binding(model='{{params.q.auto.a}}' view='{{$.qA}}' type='adsrTime'    title='Resonance attack time')
      synth-binding(model='{{params.q.auto.p}}' view='{{$.qP}}' type='q'           title='Resonance peak value')
      synth-binding(model='{{params.q.auto.d}}' view='{{$.qD}}' type='adsrTime'    title='Resonance decay time constant')
      synth-binding(model='{{params.q.auto.s}}' view='{{$.qS}}' type='q'           title='Resonance sustain value')
      synth-binding(model='{{params.freq.lfo.freq}}' view='{{$.lfoFF}}' type='lfoFrequency' title='Cutoff LFO frequency')
      synth-binding(model='{{params.freq.lfo.amount}}' view='{{$.lfoFA}}' type='lfoAmount'  title='Cutoff LFO amount')
      synth-binding(model='{{params.q.lfo.freq}}' view='{{$.lfoQF}}' type='lfoFrequency'    title='Resonance LFO frequency')
      synth-binding(model='{{params.q.lfo.amount}}' view='{{$.lfoQA}}' type='lfoQAmount'    title='Resonance LFO amount')
  script: :es6
    Polymer({
      created() {
        this.params = { }
      },
    })

polymer-element(name='chain-ui' attributes='model')
  template
    core-style(ref='chain-ui')
    style: :scss
      @import "style";
      :host > .container {
        display: flex;
        flex-wrap: nowrap;
        overflow-x: scroll;
        overflow-y: hidden;
        -webkit-overflow-scrolling: touch;
        align-content: stretch;
        padding: 8px;
        background: #353433;
        > :not(:last-child) {
          margin-right: 16px;
        }
        > * {
          flex-shrink: 0;
        }
      }
    .container
      synth-options-main(model='{{model}}')
      template(repeat='{{item, index in model.voice}}')
        template(if='{{item.type == "Oscillator"}}')
          synth-options-oscillator(params='{{item.params}}' index='{{index}}')
        template(if='{{item.type == "BiquadFilter"}}')
          synth-options-biquad-filter(params='{{item.params}}' index='{{index}}')
  script: :es6
    Polymer({
      created() {
        this.model = { }
      }
    })

